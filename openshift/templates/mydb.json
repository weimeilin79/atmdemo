#
# Do not edit, this is a generated file.  To regenerate,  run: ./generator/run.sh
#
apiVersion: v1
kind: Template
metadata:
  name: syndesis-dev-restricted
#
# Template flavor:
#
# Allow localhost refs: true
# Use docker images: true
# Without Probes: false
# Atlasmap Tag: latest
# Syndesis Tag: latest
# Restricted environment: true
#
  labels:
    app: syndesis
parameters:
# Parameters with no defaults (has to be be provided when template is applied):

# Parameters with defaults:
- name: OPENSHIFT_MASTER
  description: Public OpenShift master address
  value: https://localhost:8443
  required: true
- description: Maximum amount of memory the PostgreSQL container can use.
  displayName: Memory Limit
  name: POSTGRESQL_MEMORY_LIMIT
  value: 255Mi
- description: The OpenShift Namespace where the PostgreSQL ImageStream resides.
  displayName: Namespace
  name: POSTGRESQL_IMAGE_STREAM_NAMESPACE
  value: openshift
- description: Username for PostgreSQL user that will be used for accessing the database.
  displayName: PostgreSQL Connection Username
  name: POSTGRESQL_USER
  value: syndesis
- description: Password for the PostgreSQL connection user.
  displayName: PostgreSQL Connection Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: POSTGRESQL_PASSWORD
  required: true
- description: Name of the PostgreSQL database accessed.
  displayName: PostgreSQL Database Name
  name: POSTGRESQL_DATABASE
  required: true
  value: syndesis
- description: Volume space available for PostgreSQL data, e.g. 512Mi, 2Gi.
  displayName: Volume Capacity
  name: POSTGRESQL_VOLUME_CAPACITY
  required: true
  value: 1Gi
- description: Password for the PostgreSQL sampledb user.
  displayName: PostgreSQL SampleDB Connection Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: POSTGRESQL_SAMPLEDB_PASSWORD
  required: true
- description: Enables test-support endpoint on backend API
  displayName: Test Support Enabled
  name: TEST_SUPPORT_ENABLED
  required: true
  value: "false"
- description: Enables starting up with demo data
  displayName: Demo Data Enabled
  name: DEMO_DATA_ENABLED
  required: true
  value: "false"
- description: Registry from where to fetch Syndesis images
  displayName: Syndesis Image Registry
  name: SYNDESIS_REGISTRY
  value: 'docker.io'
- description: Should deployment of integrations be enabled?
  displayName: Enable Integration Deployment
  name: CONTROLLERS_INTEGRATION_ENABLED
  value: 'true'
- description: Namespace containing image streams
  displayName: Image Stream Namespace
  name: IMAGE_STREAM_NAMESPACE
  value: ''
- description: Secret to use to encrypt oauth cookies
  displayName: OAuth Cookie Secret
  name: OAUTH_COOKIE_SECRET
  generate: expression
  from: '[a-zA-Z0-9]{32}'
- name: SYNDESIS_ENCRYPT_KEY
  description: The encryption key used to encrypt/decrypt stored secrets
  generate: expression
  from: "[a-zA-Z0-9]{64}"
  required: true
message: |-
  Syndesis is deployed to ${ROUTE_HOSTNAME}.
objects:


- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: syndesis
      component: syndesis-db
    name: syndesis-sampledb-config
  data:
    add-sample-db.sh: |
      #!/bin/bash
      until bash -c "psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'"; do
        echo "Waiting for Postgres server..."
        sleep 1
      done
      echo "----- creating sampledb"
      psql <<EOF
        CREATE DATABASE sampledb;
        CREATE USER sampledb WITH PASSWORD '$POSTGRESQL_SAMPLEDB_PASSWORD';
        GRANT ALL PRIVILEGES ON DATABASE sampledb to sampledb;
      EOF
      psql -d sampledb -U sampledb <<'EOF'
        CREATE TABLE IF NOT EXISTS contact (first_name VARCHAR, last_name VARCHAR, company VARCHAR, lead_source VARCHAR, create_date DATE);
        INSERT INTO contact VALUES ('Joe','Jackson','Red Hat','db',current_timestamp);
        CREATE TABLE IF NOT EXISTS todo (id SERIAL PRIMARY KEY, task VARCHAR, completed INTEGER);
        CREATE OR REPLACE FUNCTION add_lead(
          first_and_last_name varchar,
          company varchar,
          phone varchar,
          email varchar,
          lead_source varchar,
          lead_status varchar,
          rating varchar)

          RETURNS void
          LANGUAGE 'plpgsql'

        AS $BODY$
        DECLARE
          task varchar;
        BEGIN
          task := concat(lead_status || ' ', 'Lead: Please contact ', first_and_last_name, ' from ' || company, ' via phone: ' || phone, ' via email: ' || email, '. ', 'Lead is from ' || lead_source, '. Rating: ' || rating, '.');
          insert into todo(task,completed) VALUES (task,0);
        END;
        $BODY$;
        
        DROP TABLE IF EXISTS ATMS;
        CREATE TABLE IF NOT EXISTS ATMS (
            ID SERIAL UNIQUE, 
            LAT DECIMAL,
            LNG DECIMAL,
            BANK VARCHAR(20),
            ADDRESS TEXT
        );
        
        GRANT ALL PRIVILEGES ON TABLE ATMS TO syndesis;  
        
        INSERT INTO ATMS (LAT,LNG,BANK,ADDRESS) VALUES (51.4565624,-0.1925085,'HSBC','21 Kings Mall, King Street, Hammersmith');
      EOF

      echo "----- sampledb created"
    postStart.sh: |
      #!/bin/bash
      /var/lib/pgsql/sampledb/add-sample-db.sh &>  /proc/1/fd/1

- apiVersion: v1
  kind: Service
  metadata:
    name: syndesis-db
    labels:
      app: syndesis
      component: syndesis-db
  spec:
    ports:
    - name: postgresql
      nodePort: 0
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      app: syndesis
      component: syndesis-db
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    name: syndesis-db
    labels:
      app: syndesis
      component: syndesis-db
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: ${POSTGRESQL_VOLUME_CAPACITY}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: syndesis-db
    labels:
      app: syndesis
      component: syndesis-db
  spec:
    replicas: 1
    selector:
      app: syndesis
      component: syndesis-db
    strategy:
      type: Recreate
      resources:
        limits:
          memory: "256Mi"
        requests:
          memory: "20Mi"
    template:
      metadata:
        labels:
          app: syndesis
          component: syndesis-db
      spec:
        containers:
        - capabilities: {}
          env:
          - name: POSTGRESQL_USER
            value: ${POSTGRESQL_USER}
          - name: POSTGRESQL_PASSWORD
            value: ${POSTGRESQL_PASSWORD}
          - name: POSTGRESQL_DATABASE
            value: ${POSTGRESQL_DATABASE}
          - name: POSTGRESQL_SAMPLEDB_PASSWORD
            value: ${POSTGRESQL_SAMPLEDB_PASSWORD}
          image: ' '
          imagePullPolicy: IfNotPresent
          lifecycle:
            postStart:
              exec:
                command:
                - /bin/sh
                - -c
                - /var/lib/pgsql/sampledb/postStart.sh
          livenessProbe:
            initialDelaySeconds: 60
            tcpSocket:
              port: 5432
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
            initialDelaySeconds: 5
          # DB QoS class is "Guaranteed" (requests == limits)
          # Note: On OSO there is no Guaranteed class, its always burstable
          resources:
            limits:
              memory: ${POSTGRESQL_MEMORY_LIMIT}
            requests:
              memory: ${POSTGRESQL_MEMORY_LIMIT}
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: syndesis-db-data
          - mountPath: /var/lib/pgsql/sampledb
            name: syndesis-sampledb-config
        volumes:
        - name: syndesis-db-data
          persistentVolumeClaim:
            claimName: syndesis-db
        - configMap:
            defaultMode: 511
            name: syndesis-sampledb-config
          name: syndesis-sampledb-config
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:9.5
          namespace: ${POSTGRESQL_IMAGE_STREAM_NAMESPACE}
      type: ImageChange
    - type: ConfigChange


- apiVersion: v1
  kind: Service
  metadata:
    name: demo-map
    annotations:
      description: Exposes and load balances the application pods
  spec:
    ports:
    - name: web
      port: 8080
      targetPort: 8080
    selector:
      name: demo-map
- apiVersion: v1
  kind: Route
  metadata:
    name: demo-map
  spec:
    host: "${APPLICATION_DOMAIN}"
    to:
      kind: Service
      name: demo-map
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: demo-map
    annotations:
      description: Keeps track of changes in the application image
- apiVersion: v1
  kind: BuildConfig
  metadata:
    name: demo-map
    annotations:
      description: Defines how to build the application
      template.alpha.openshift.io/wait-for-ready: 'true'
  spec:
    source:
      type: Git
      git:
        uri: "https://github.com/weimeilin79/atmdemo.git"
    strategy:
      type: Source
      sourceStrategy:
        from:
          kind: ImageStreamTag
          namespace: openshift
          name: nodejs:6
    output:
      to:
        kind: ImageStreamTag
        name: "demo-map:latest"
    triggers:
    - type: ImageChange
    - type: ConfigChange
    postCommit:
      script: npm test

- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: demo-map
    annotations:
      description: Defines how to deploy the application server
      template.alpha.openshift.io/wait-for-ready: 'true'
  spec:
    strategy:
      type: Rolling
    triggers:
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - nodejs-example
        from:
          kind: ImageStreamTag
          name: "demo-map:latest"
    - type: ConfigChange
    replicas: 1
    selector:
      name: demo-map
    template:
      metadata:
        name: demo-map
        labels:
          name: demo-map
      spec:
        containers:
        - name: nodejs-example
          image: " "
          ports:
          - containerPort: 8080
          readinessProbe:
            timeoutSeconds: 3
            initialDelaySeconds: 3
            httpGet:
              path: "/"
              port: 8080
          livenessProbe:
            timeoutSeconds: 3
            initialDelaySeconds: 30
            httpGet:
              path: "/"
              port: 8080
          resources:
            limits:
              memory: 512Mi
          env: []